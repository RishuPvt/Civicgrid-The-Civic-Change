// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

// ------------------ ENUMS ------------------

enum UserRole {
  USER
  ADMIN
}

enum TaskStatus {
  PENDING_VERIFICATION
  OPEN
  COMPLETED
  REJECTED
}

// ------------------ MODELS ------------------

model User {
  id         String    @id @default(cuid())
  name       String
  email      String    @unique
  password   String   
  avatar     String?
  civicScore Int       @default(0)
  rank       Int?      // calculated periodically
  address    String?
  badges     Badge[]   // relation to Badge model
  role       UserRole  @default(USER)

  // Relationships
  tasksCreated    Task[]      @relation("TasksCreated")
  activities      Activity[]
  rewardsClaimed  RewardClaim[]
  comments        Comment[]
  votes           Vote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Badge {
  id     String @id @default(cuid())
  name   String
  icon   String?
  users  User[]
}

model Task {
  id          String      @id @default(cuid())
  title       String
  description String
  imageUrl    String?
  latitude    Float
  longitude   Float
  status      TaskStatus  @default(PENDING_VERIFICATION)
  points      Int         @default(0)
  creatorId   String
  creator     User        @relation("TasksCreated", fields: [creatorId], references: [id])
  
  comments    Comment[]
  votes       Vote[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
}

model Vote {
  id        String   @id @default(cuid())
  value     Boolean  // true = valid, false = invalid
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])
  voterId   String
  voter     User     @relation(fields: [voterId], references: [id])
  createdAt DateTime @default(now())
}

model Reward {
  id          String        @id @default(cuid())
  name        String
  description String?
  pointsReq   Int
  claims      RewardClaim[]
  imageUrl    String?
}

model RewardClaim {
  id        String   @id @default(cuid())
  userId    String
  rewardId  String
  user      User     @relation(fields: [userId], references: [id])
  reward    Reward   @relation(fields: [rewardId], references: [id])
  claimedAt DateTime @default(now())
}

model Activity {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String   // description of the activity
  createdAt DateTime @default(now())
}
