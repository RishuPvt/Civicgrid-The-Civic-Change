generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  name           String
  email          String        @unique
  password       String
  avatar         String?
  civicScore     Int           @default(0)
  rank           Int?
  latitude       Float?
  longitude      Float?
  role           UserRole      @default(USER)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  activities     Activity[]
  comments       Comment[]
  rewardsClaimed RewardClaim[]
  tasksCreated   Task[]        @relation("TasksCreated")
  votes          Vote[]
  badges         Badge[]       @relation("BadgeToUser")
}

model Badge {
  id    String  @id @default(cuid())
  name  String
  icon  String?
  users User[]  @relation("BadgeToUser")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String
  imageUrl    String[]
  latitude    Float
  longitude   Float
  status      TaskStatus @default(PENDING_VERIFICATION)
  points      Int        @default(0)
  creatorId   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  comments    Comment[]
  creator     User       @relation("TasksCreated", fields: [creatorId], references: [id])
  votes       Vote[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  authorId  String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  task      Task     @relation(fields: [taskId], references: [id])
}

model Vote {
  id        String   @id @default(cuid())
  value     Boolean
  taskId    String
  voterId   String
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id])
  voter     User     @relation(fields: [voterId], references: [id])
}

model Reward {
  id          String        @id @default(cuid())
  name        String
  description String?
  pointsReq   Int
  imageUrl    String?
  claims      RewardClaim[]
}

model RewardClaim {
  id        String   @id @default(cuid())
  userId    String
  rewardId  String
  claimedAt DateTime @default(now())
  reward    Reward   @relation(fields: [rewardId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Activity {
  id        String   @id @default(cuid())
  userId    String
  action    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  USER
  ADMIN
}

enum TaskStatus {
  PENDING_VERIFICATION
  OPEN
  COMPLETED
  REJECTED
}
